// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/eye3d.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: 3D Eye
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, Default)]
pub struct Eye3D {
    /// Eye Kind
    pub kind: Option<SerializedComponentBatch>,

    /// Position of eye.
    pub position: Option<SerializedComponentBatch>,

    /// target for eye
    pub target: Option<SerializedComponentBatch>,

    /// Translation speed of the eye -- should be positive only (more constrainted than scalar)
    pub speed: Option<SerializedComponentBatch>,

    /// Spinning speed of the eye around the "up" axis of the eye.
    pub spin_speed: Option<SerializedComponentBatch>,
}

impl Eye3D {
    /// Returns the [`ComponentDescriptor`] for [`Self::kind`].
    ///
    /// The corresponding component is [`crate::blueprint::components::Eye3DKind`].
    #[inline]
    pub fn descriptor_kind() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.Eye3D".into()),
            component: "Eye3D:kind".into(),
            component_type: Some("rerun.blueprint.components.Eye3DKind".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::position`].
    ///
    /// The corresponding component is [`crate::components::Position3D`].
    #[inline]
    pub fn descriptor_position() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.Eye3D".into()),
            component: "Eye3D:position".into(),
            component_type: Some("rerun.components.Position3D".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::target`].
    ///
    /// The corresponding component is [`crate::components::Position3D`].
    #[inline]
    pub fn descriptor_target() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.Eye3D".into()),
            component: "Eye3D:target".into(),
            component_type: Some("rerun.components.Position3D".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::speed`].
    ///
    /// The corresponding component is [`crate::components::Scalar`].
    #[inline]
    pub fn descriptor_speed() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.Eye3D".into()),
            component: "Eye3D:speed".into(),
            component_type: Some("rerun.components.Scalar".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::spin_speed`].
    ///
    /// The corresponding component is [`crate::components::Scalar`].
    #[inline]
    pub fn descriptor_spin_speed() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.Eye3D".into()),
            component: "Eye3D:spin_speed".into(),
            component_type: Some("rerun.components.Scalar".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for the associated indicator component.
    #[inline]
    pub fn descriptor_indicator() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: None,
            component: "rerun.blueprint.components.Eye3DIndicator".into(),
            component_type: None,
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 5usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            Eye3D::descriptor_kind(),
            Eye3D::descriptor_position(),
            Eye3D::descriptor_target(),
            Eye3D::descriptor_speed(),
            Eye3D::descriptor_spin_speed(),
        ]
    });

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [Eye3D::descriptor_indicator()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 6usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            Eye3D::descriptor_kind(),
            Eye3D::descriptor_position(),
            Eye3D::descriptor_target(),
            Eye3D::descriptor_speed(),
            Eye3D::descriptor_spin_speed(),
            Eye3D::descriptor_indicator(),
        ]
    });

impl Eye3D {
    /// The total number of components in the archetype: 5 required, 1 recommended, 0 optional
    pub const NUM_COMPONENTS: usize = 6usize;
}

/// Indicator component for the [`Eye3D`] [`::re_types_core::Archetype`]
pub type Eye3DIndicator = ::re_types_core::GenericIndicatorComponent<Eye3D>;

impl ::re_types_core::Archetype for Eye3D {
    type Indicator = Eye3DIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.Eye3D".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Eye 3D"
    }

    #[inline]
    fn indicator() -> SerializedComponentBatch {
        #[allow(clippy::unwrap_used)]
        Eye3DIndicator::DEFAULT
            .serialized(Self::descriptor_indicator())
            .unwrap()
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let kind = arrays_by_descr
            .get(&Self::descriptor_kind())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_kind()));
        let position = arrays_by_descr
            .get(&Self::descriptor_position())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_position()));
        let target = arrays_by_descr
            .get(&Self::descriptor_target())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_target()));
        let speed = arrays_by_descr
            .get(&Self::descriptor_speed())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_speed()));
        let spin_speed = arrays_by_descr
            .get(&Self::descriptor_spin_speed())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_spin_speed())
            });
        Ok(Self {
            kind,
            position,
            target,
            speed,
            spin_speed,
        })
    }
}

impl ::re_types_core::AsComponents for Eye3D {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.kind.clone(),
            self.position.clone(),
            self.target.clone(),
            self.speed.clone(),
            self.spin_speed.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for Eye3D {}

impl Eye3D {
    /// Create a new `Eye3D`.
    #[inline]
    pub fn new(
        kind: impl Into<crate::blueprint::components::Eye3DKind>,
        position: impl Into<crate::components::Position3D>,
        target: impl Into<crate::components::Position3D>,
        speed: impl Into<crate::components::Scalar>,
        spin_speed: impl Into<crate::components::Scalar>,
    ) -> Self {
        Self {
            kind: try_serialize_field(Self::descriptor_kind(), [kind]),
            position: try_serialize_field(Self::descriptor_position(), [position]),
            target: try_serialize_field(Self::descriptor_target(), [target]),
            speed: try_serialize_field(Self::descriptor_speed(), [speed]),
            spin_speed: try_serialize_field(Self::descriptor_spin_speed(), [spin_speed]),
        }
    }

    /// Update only some specific fields of a `Eye3D`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `Eye3D`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            kind: Some(SerializedComponentBatch::new(
                crate::blueprint::components::Eye3DKind::arrow_empty(),
                Self::descriptor_kind(),
            )),
            position: Some(SerializedComponentBatch::new(
                crate::components::Position3D::arrow_empty(),
                Self::descriptor_position(),
            )),
            target: Some(SerializedComponentBatch::new(
                crate::components::Position3D::arrow_empty(),
                Self::descriptor_target(),
            )),
            speed: Some(SerializedComponentBatch::new(
                crate::components::Scalar::arrow_empty(),
                Self::descriptor_speed(),
            )),
            spin_speed: Some(SerializedComponentBatch::new(
                crate::components::Scalar::arrow_empty(),
                Self::descriptor_spin_speed(),
            )),
        }
    }

    /// Eye Kind
    #[inline]
    pub fn with_kind(mut self, kind: impl Into<crate::blueprint::components::Eye3DKind>) -> Self {
        self.kind = try_serialize_field(Self::descriptor_kind(), [kind]);
        self
    }

    /// Position of eye.
    #[inline]
    pub fn with_position(mut self, position: impl Into<crate::components::Position3D>) -> Self {
        self.position = try_serialize_field(Self::descriptor_position(), [position]);
        self
    }

    /// target for eye
    #[inline]
    pub fn with_target(mut self, target: impl Into<crate::components::Position3D>) -> Self {
        self.target = try_serialize_field(Self::descriptor_target(), [target]);
        self
    }

    /// Translation speed of the eye -- should be positive only (more constrainted than scalar)
    #[inline]
    pub fn with_speed(mut self, speed: impl Into<crate::components::Scalar>) -> Self {
        self.speed = try_serialize_field(Self::descriptor_speed(), [speed]);
        self
    }

    /// Spinning speed of the eye around the "up" axis of the eye.
    #[inline]
    pub fn with_spin_speed(mut self, spin_speed: impl Into<crate::components::Scalar>) -> Self {
        self.spin_speed = try_serialize_field(Self::descriptor_spin_speed(), [spin_speed]);
        self
    }
}

impl ::re_byte_size::SizeBytes for Eye3D {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.kind.heap_size_bytes()
            + self.position.heap_size_bytes()
            + self.target.heap_size_bytes()
            + self.speed.heap_size_bytes()
            + self.spin_speed.heap_size_bytes()
    }
}
