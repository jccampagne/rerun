// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/eye3d.fbs".

#pragma once

#include "../../blueprint/components/eye3d_kind.hpp"
#include "../../collection.hpp"
#include "../../component_batch.hpp"
#include "../../component_column.hpp"
#include "../../components/linear_speed.hpp"
#include "../../indicator_component.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    /// **Archetype**: 3D Eye in a spatial 3D view
    ///
    /// âš  **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    ///
    struct Eye3D {
        /// Eye kind
        std::optional<ComponentBatch> kind;

        /// Translation speed of the eye in the view.
        std::optional<ComponentBatch> translation_speed;

      public:
        static constexpr const char IndicatorComponentType[] =
            "rerun.blueprint.components.Eye3DIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentType>;
        /// The name of the archetype as used in `ComponentDescriptor`s.
        static constexpr const char ArchetypeName[] = "rerun.blueprint.archetypes.Eye3D";

        /// `ComponentDescriptor` for the `kind` field.
        static constexpr auto Descriptor_kind = ComponentDescriptor(
            ArchetypeName, "Eye3D:kind",
            Loggable<rerun::blueprint::components::Eye3DKind>::ComponentType
        );
        /// `ComponentDescriptor` for the `translation_speed` field.
        static constexpr auto Descriptor_translation_speed = ComponentDescriptor(
            ArchetypeName, "Eye3D:translation_speed",
            Loggable<rerun::components::LinearSpeed>::ComponentType
        );

      public:
        Eye3D() = default;
        Eye3D(Eye3D&& other) = default;
        Eye3D(const Eye3D& other) = default;
        Eye3D& operator=(const Eye3D& other) = default;
        Eye3D& operator=(Eye3D&& other) = default;

        /// Update only some specific fields of a `Eye3D`.
        static Eye3D update_fields() {
            return Eye3D();
        }

        /// Clear all the fields of a `Eye3D`.
        static Eye3D clear_fields();

        /// Eye kind
        Eye3D with_kind(const rerun::blueprint::components::Eye3DKind& _kind) && {
            kind = ComponentBatch::from_loggable(_kind, Descriptor_kind).value_or_throw();
            return std::move(*this);
        }

        /// Translation speed of the eye in the view.
        Eye3D with_translation_speed(const rerun::components::LinearSpeed& _translation_speed) && {
            translation_speed =
                ComponentBatch::from_loggable(_translation_speed, Descriptor_translation_speed)
                    .value_or_throw();
            return std::move(*this);
        }

        /// Partitions the component data into multiple sub-batches.
        ///
        /// Specifically, this transforms the existing `ComponentBatch` data into `ComponentColumn`s
        /// instead, via `ComponentBatch::partitioned`.
        ///
        /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
        ///
        /// The specified `lengths` must sum to the total length of the component batch.
        Collection<ComponentColumn> columns(const Collection<uint32_t>& lengths_);

        /// Partitions the component data into unit-length sub-batches.
        ///
        /// This is semantically similar to calling `columns` with `std::vector<uint32_t>(n, 1)`,
        /// where `n` is automatically guessed.
        Collection<ComponentColumn> columns();
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::Eye3D> {
        /// Serialize all set component batches.
        static Result<Collection<ComponentBatch>> as_batches(
            const blueprint::archetypes::Eye3D& archetype
        );
    };
} // namespace rerun
